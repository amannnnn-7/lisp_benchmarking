(define (read-line)
  (let loop ((chars '()))
    (let ((c (read-char)))
      (cond
        ((or (eof-object? c) (char=? c #\newline))
         (list->string (reverse chars)))
        (else
         (loop (cons c chars)))))))

(define (string-split str delimiter)
  (let ((len (string-length str)))
    (let loop ((i 0) (start 0) (result '()))
      (cond
        ((= i len)
         (if (= start i)
             (reverse result)
             (reverse (cons (substring str start i) result))))
        ((char=? (string-ref str i) delimiter)
         (if (= start i)
             (loop (+ i 1) (+ i 1) result)
             (loop (+ i 1) (+ i 1) (cons (substring str start i) result))))
        (else
         (loop (+ i 1) start result))))))

(define (solve)
  (let* ((t (read))
         (dummy (read-line)))
    (do ((test 0 (+ test 1)))
        ((= test t))
      (let* ((n (read))
             (k (read))
             (dummy2 (read-line))
             (dict-line (read-line))
             (dict-words (string-split dict-line #\space)))
        (let ((modern-words (make-hash-table)))
          (do ((phrase 0 (+ phrase 1)))
              ((= phrase k))
            (let* ((phrase-line (read-line))
                   (phrase-parts (string-split phrase-line #\space))
                   (l (string->number (car phrase-parts)))
                   (words (cdr phrase-parts)))
              (for-each (lambda (word)
                          (hash-set! modern-words word #t))
                        words)))
          (let ((results '()))
            (for-each (lambda (dict-word)
                        (if (hash-ref modern-words dict-word)
                            (set! results (cons "YES" results))
                            (set! results (cons "NO" results))))
                      dict-words)
            (display (string-join (reverse results) " "))
            (newline)))))))

(solve)